On décompile le programme et on voit qu'il s'agit encore d'un exploit avec printf. 
Cette fois ci on a pas de chiffre hardcode a mettre dans une variable. 

On ne non plus manipuler la valeur de retour car le main appelle exit, et ne return pas. 

exit est une fonction externe que l'on appelle grace a la plt. C'est un mécanisme 
d'appel de fonctions externes, par exemple pour les librairies linkées dynamiquement. 
Il suffit donc de modifier une entree dans la plt pour que exit apelle la 
fonction que l'on veut plutot que la vraie fonction exit. 

On constate dans le code asm qu'il y a un wrapper pour appeller les fonctions externe 
et qu'une reference a une adresse est appelée. 

l'entree de la plt que l'on veut modifier est a l'adresse 0x8049838 et on veux 
y mettre 0x080484A4 en utilisant la faille de printf %n

On convertit cette valeur, et on obtient 134513828.
Avec l'exploit du %n de printf, on doit donc imprimer 134513828 char, pour 
ensuite les mettre à la bonne adresse.
On construit donc la payload comme suit :
-l'adresse où l'on veut écrire, en little-endian
-%134513824c, qui écrit des espaces à l'écran. Comme on a déjà écrit 4 caractères
 en écrivant l'adresse, on veut écrire 134513828 - 4 caractères

La commande d'attaque est donc :
python -c 'print("\x38\x98\x04\x08%134513824c%4$n")' > test2 && cat test2 - | ./level5
On peut ensuite récupérer le flag :
cat /home/user/level6/.pass