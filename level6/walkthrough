On décompile le programme et on voit qu'il y a deux malloc, l'un à la suite 
de l'autre. Le premier malloc alloue un buffer de 64 pour une string, 
le deuxième alloue de la place pour un pointeur sur fonction, de prototype 
int fun(void). Avec gdb on constate que ces deux mallocs sont côte à côte dans la
mémoire, et qu'il sont toujours alloués au même endroit. On peut affecter le 
deuxième malloc avec le premier, car il y a un strcpy de argv[1] qui est fait 
dessus. 

Après le strcpy, le programme appelle la fonction pointé par le pointeur de fonction. 
Donc en mettant l'adresse que l'on veut dans argv[1] après une 
payload, on peut changer le cours d'execution du programme vers une fonction
fortuite n qui affiche le flag. 

Avec un outil en ligne, on trouve que l'offset est de 72. Avec objdump on 
trouve que l'adresse de la fonction fortuite est 0x08048454. On construit donc
l'exploit comme suit :
-72 caractères de padding
-l'adresse où l'on veut aller, qui est celle de la fonction n

La commande d'attaque est donc : 
./level6 $(python -c 'print "A"*72 + "\x54\x84\x04\x08"')
Ça affiche directement le flag. 