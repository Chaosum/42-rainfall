En se connectant, on trouve un fichier executable. On le décompile, et on 
voit qu'il n'utilise plus gets, mais fgets, donc on ne pourra plus faire un
buffer overflow comme dans les exercices précédents. On constate par contre 
que la string fournie par l'utilisateur est donnée directement à fprintf. La 
string est par ailleurs sur la stack. On peut donc donner un format au programme
qui l'analysera en récupérant les données nécessaires sur la stack. 
En désassemblant le programme, on constate qu'il vérifie qu'une variable à
l'adresse 0x804988c a bien la valeur 0x40, et que si c'est le cas, il execute
un system("/bin/sh"). Il suffit donc de mettre cette variable à 0x40 avec un 
format donné sur l'entrée standard. 
Pour se faire, on utilise le format %n, qui prend un pointeur sur la stack et
y écrit le nombre de charactère imprimés à l'écran. On met donc l'adresse de 
la variable sur la stack, et on vérifie la combientième elle est depuis le 
sommet de la stack avec le format %x. On observe que l'adresse est en 4è 
position, donc on peut y accéder avec le format %4$n. On écrit ensuite le bon 
nombre de charactères à l'écran en comblant avec des 'a'. 
Au final, on écrit les 4 octets correspondant à l'adresse, en ordre inverse 
à cause de la stack, et 60 'a', pour obtenir une chaîne de 64 octets de long. 
Pour accéder au shell, on fait :
echo -e '\x8c\x98\x04\x08aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa%4$n' > /tmp/level3 && cat /tmp/level3 - | ./level3
On récupère ensuite le flag comme d'habitude. 
